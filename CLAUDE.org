#+TITLE: Guidelines for AI Assistance with the Simulacra-Scheme Project
#+AUTHOR: Jason Walsh
#+DATE: [2025-03-22 Sat]

* Build & Run Commands

#+BEGIN_SRC shell
# Run social media simulation
make run-example

# Run basic simulacra demo
make run-demo

# Run hyperreality demo
make run-hyperreality

# Generate Mermaid diagrams
make generate-diagrams

# Run specific functions in REPL
guile -l simulacra.scm -c "(demo-progression)"
guile -l example.scm -c "(run-social-media-simulation)"

# Run tests (when implemented)
guile -l tests/simulacra-tests.scm
#+END_SRC

* Code Style Guidelines

** Module System
Use Guile's module system appropriately:

#+BEGIN_SRC scheme
(define-module (simulacra core)
  #:use-module (srfi srfi-9)   ;; records
  #:use-module (srfi srfi-95)  ;; sorting
  #:export (make-reality
            reality?
            reality-name
            reality-essence
            reality-existence))
#+END_SRC

** Record Types
Use SRFI-9 for defining record types:

#+BEGIN_SRC scheme
(define-record-type <reality>
  (make-reality name essence existence)
  reality?
  (name reality-name)
  (essence reality-essence)
  (existence reality-existence))
#+END_SRC

** Pure Functions
Prefer pure functions where possible, following functional programming principles:

#+BEGIN_SRC scheme
;; Good: Pure function that returns a new object
(define (first-order-simulacra reality)
  (make-reality 
    (string-append "Reflection of " (reality-name reality))
    (reality-essence reality)
    (reality-existence reality)))

;; Avoid: Mutating existing objects when not necessary
(define (bad-first-order! reality)
  (set! (reality-name reality) 
        (string-append "Reflection of " (reality-name reality)))
  reality)
#+END_SRC

** List Operations
Use functional operations on lists:

#+BEGIN_SRC scheme
;; Map, filter, and fold are preferred over explicit recursion
(define (process-realities realities)
  (map first-order-simulacra 
       (filter reality? realities)))
#+END_SRC

** Documentation
Include docstrings and comments explaining philosophical concepts:

#+BEGIN_SRC scheme
(define (fourth-order-simulacra)
  "Creates a pure simulacrum with no relation to reality.
   
   In Baudrillard's theory, this represents the final stage
   where the simulation has completely replaced any reference
   to reality and operates solely on its own terms."
  (make-reality "Pure Simulacrum" 'self-referential 'hyperreal))
#+END_SRC

** Handling Errors
Guile's error handling typically uses exceptions:

#+BEGIN_SRC scheme
(define (ensure-reality object)
  (if (reality? object)
      object
      (throw 'type-error "Expected a reality object")))
#+END_SRC

** Testing
Prefer SRFI-64 for writing tests:

#+BEGIN_SRC scheme
(use-modules (srfi srfi-64))

(test-begin "simulacra-tests")

(test-assert "reality creation" 
  (reality? (make-reality "test" 'test 'test)))

(test-equal "first order simulacra" 
  "Reflection of Original"
  (reality-name (first-order-simulacra 
                  (make-reality "Original" 'authentic 'real))))

(test-end "simulacra-tests")
#+END_SRC

* Project Structure
- =simulacra.scm= :: Core implementation of Baudrillard's concepts
- =example.scm= :: Social media simulation showing progress through orders of simulacra
- =mermaid-generator.scm= :: Generates Mermaid diagrams from the Scheme models
- =simulacra-diagram.md= :: Pre-generated Mermaid diagrams of key concepts
- =GUILE-NOTES.org= :: Platform-specific information for Guile Scheme

* Development Focus
- Make philosophical concepts accessible through code
- Improve visualizations to better explain simulation progression
- Add interactive elements that allow users to experiment with the concepts
- Ensure cross-platform compatibility (OSX, FreeBSD, Linux)
- Maintain functional programming paradigms appropriate to Scheme